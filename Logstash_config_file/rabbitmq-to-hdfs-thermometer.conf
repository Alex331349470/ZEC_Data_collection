input {
    rabbitmq {
        host => "10.0.16.10"
        port => 5672
        user => "test"
        password => "test"
        queue => "GYJF_GY_GATHER_HDFS"
        exchange => "GYJF_DATA_GATHER"
        vhost => "ZEC_SCADA"
        durable => true
		auto_delete => false
        prefetch_count => 8
        codec => plain
    }
}

filter {
	json {
		source => "message"
		target => "message"
	}
	
	date {
		match => ["[message][timestamp]", "UNIX"]
		target => "[message][timestamp]"		
	}
	mutate{
		add_field=>{
			'output_prefix'=>'/zec_data/'
			# 'ruby_rtd_index'=>0
		}
	}
	
	
	ruby{
		code=> "event.set('[message][timestamp_plus]', LogStash::Timestamp.at(event.get('[message][timestamp]').time.localtime + 8*60*60))"
	}

	
	grok{
		match=>{
			"[message][timestamp_plus]"=>"(?<rtd_date>\d{4}-\d{2}-\d{2})T(?<rtd_time>(?<rtd_hour>\d{2}):\d{2}:\d{2})\.\d{3}Z"
		}
		
		add_field => {
			"[message][rtd_date_time]" => "%{rtd_date} %{rtd_time}"
		}
	}

	ruby {
		code => '
			event.get("[message][data]").each{ |k, v|
				full_name="#{k}"
				name = full_name.split("_")[0]
				# index = Integer(event.get("ruby_rtd_index"))
				rtd_index = "thermometer"
				event.set("[message][data][#{k}][rtd_timestamp]", event.get("[message][rtd_date_time]"))
				event.set("[message][data][#{k}][rtd_name]", name)
				event.set("[message][data][#{k}][rtd_index]", rtd_index)
				event.set("[message][data][#{k}][rtd_date]", event.get("rtd_date"))
				event.set("[message][data][#{k}][rtd_hour]", event.get("rtd_hour"))
				event.set("[message][data][#{k}][rtd_time]", event.get("rtd_time"))
				event.set("[message][data][#{k}][rtd_type]", event.get("[message][type]"))
				# dew_point = temperature - ((100 - humidity) / 5)
				event.set("[message][data][#{k}][dew_point]", String(
					(
						event.get("[message][data][#{k}][temperature]").to_f - ( 
							(100 - event.get("[message][data][#{k}][humidity]").to_f) / 5
						)
					).round(1)
				))
				# event.set("[message][data][#{k}][ruby_rtd_index]", event.get("ruby_rtd_index"))
				# event.set("[message][msg][#{index}]", event.get("[message][data][#{k}]"))
				# event.set("ruby_rtd_index", Integer(Integer(event.get("ruby_rtd_index"))+1).to_s)
			}
			event.set("message", event.get("[message][data]").values)
		'
		# remove_field => [ "[message][data]" ]
	}

	split {
		field => "message"
		# add_field => { "rtd_index" => "%{[message][rtd_index]}"}
		# remove_field => [ "[message][rtd_index]"]
	}

	mutate {
		# replace => { "message" => "%{message}"}
		# remove_field => [ "event"]
	}
}


output {
	# stdout {
	# 	codec => line{
	# 		format=>"%{[message]}"
	# 	}
	# }
	webhdfs{
		host=>"slave1"
		port=>50070
		user=>"alex"
		compression=>snappy
		# snappy_format=>file
		path=>"%{output_prefix}thermometer/rtd_date=%{[message][rtd_date]}/rtd_name=%{[message][rtd_name]}/data.json"
		codec=>line{ format=>"%{[message]}"}
		# write_behavior=>"overwrite"
		# flush_interval=>60
		# gzip=>true
		flush_size => 20000
		idle_flush_time => 50
		retry_interval => 45
	}
}
